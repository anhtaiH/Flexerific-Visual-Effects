<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:fxg="assets.fxg.*" 
		 xmlns:components="com.leonardsouza.demos.flexerific.views.components.*" 
		 xmlns:skins="com.leonardsouza.demos.flexerific.views.skins.*"
		 creationPolicy="all" 
		 xmlns:ease="com.leonardsouza.easing.spark.*" 
		 xmlns:filters="com.leonardsouza.filters.*" 
		 xmlns:display="com.leonardsouza.display.*" 
		 xmlns:effects="com.leonardsouza.effects.*" 
		 xmlns:sound="com.leonardsouza.sound.*">

	<fx:Script>
		<![CDATA[
			import com.leonardsouza.demos.flexerific.events.ChangeViewStateEvent;
			import com.leonardsouza.demos.flexerific.events.MasterShutdownEvent;
			import com.leonardsouza.demos.flexerific.events.UpdateBootConsoleTextEvent;
			import com.leonardsouza.easing.spark.base.EaseInOutBase;
			
			import flash.display.BitmapData;
			import flash.filters.DisplacementMapFilterMode;
			
			import mx.core.BitmapAsset;
			
			import spark.filters.DisplacementMapFilter;
			
			[Embed('/assets/images/displacement_static.jpg')]
			private var static:Class;
			
			private function getStaticBitmap():BitmapData
			{
				return BitmapAsset(new static()).bitmapData;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<ease:Back id="backEase" easeType="{EaseInOutBase.EASE_OUT}" />
		<ease:Sine id="preBootEase" easeType="{EaseInOutBase.EASE_OUT}" />
		<ease:Back id="postBootEase" easeType="{EaseInOutBase.EASE_IN}" />
		<fx:Array
			id="panelFilters">
			<s:GlowFilter color="0x000000" alpha=".5" blurX="10" blurY="10" inner="true" />
			<s:GlowFilter color="0xFFFFFF" alpha=".8" blurX="10" blurY="10" />
		</fx:Array>
		<fx:Array
			id="controlWheelFilters">
			<s:GlowFilter color="0x000000" alpha=".8" blurX="3" blurY="3" inner="true" />
			<s:GlowFilter color="0xFFFFFF" alpha=".8" blurX="10" blurY="10" />
		</fx:Array>
		<fx:Array
			id="bootingLogoFilters">
			<s:GlowFilter color="0x71898f" blurX="4" blurY="4" /> 
		</fx:Array>
		<fx:Array
			id="screenFilters">
		</fx:Array>
		<fx:Array
			id="scanlineFilters">
			<filters:ScanlineFilter brightness=".9" spacing="4" />
			<s:BlurFilter blurX="2" blurY="2" />
		</fx:Array>
		<s:BlurFilter id="blur" />
		<sound:AudioChannel
			id="macBootupSound" 
			source="@Embed('/assets/audio/macstartup.mp3')"
			volume=".25"/>
		<sound:AudioChannel
			id="hdBootupSound" 
			source="@Embed('/assets/audio/hd_boot.mp3')"
			volume=".4"/>
		<sound:AudioChannel
			id="radarBackgroundSound"
			source="@Embed('/assets/audio/radar_screen.mp3')"
			volume=".1"
			repeatForever="true"/>
		<filters:DisplacementMapFilter 
			id="displaceFilter" 
			mapBitmap="{getStaticBitmap()}"
			mapPoint="{new Point()}"
			componentX="{BitmapDataChannel.RED}"
			componentY="{BitmapDataChannel.RED}"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="off" />
		<s:State name="preBoot" stateGroups="on,boot" />
		<s:State name="booting" stateGroups="on,boot" />
		<s:State name="login" stateGroups="on,postBoot" />
		<s:State name="authenticated" stateGroups="on,postBoot,active" />
		<s:State name="meltdown" stateGroups="on,postBoot,active" />
	</s:states>
	
	<s:transitions>
		
		<s:Transition fromState="off" toState="preBoot">
			<s:Sequence id="preBootSequence">
				<s:SetAction target="{hdBootupSound}" property="volume" value=".4" />
				<s:CallAction target="{hdBootupSound}" functionName="play" />
				<s:Parallel>
					<s:Animate targets="{[bottomLogo, powerSymbolAndIndicators]}">
						<s:MotionPath property="alpha">
							<s:Keyframe time="25" value=".2"  />
							<s:Keyframe time="50" value=".1" />
							<s:Keyframe time="100" value=".5" />
							<s:Keyframe time="150" value=".2" />
							<s:Keyframe time="200" value=".6" />
							<s:Keyframe time="250" value=".4" />
							<s:Keyframe time="350" value=".6" />
							<s:Keyframe time="400" value=".4" />
							<s:Keyframe time="450" value=".6" />
							<s:Keyframe time="3000" value="1" />
						</s:MotionPath>
					</s:Animate>
					<s:Animate target="{screenBackground}" startDelay="1000">
						<s:MotionPath property="alpha">
							<s:Keyframe time="0" value="0" />
							<s:Keyframe time="2000" value="1" />
						</s:MotionPath>
					</s:Animate>
				</s:Parallel>
				<s:Parallel>
					<s:SetAction targets="{[indicator]}" property="shouldFlicker" value="true" />
					<s:Animate target="{screenGlowOverlay}">
						<s:MotionPath property="alpha">
							<s:Keyframe time="0" value="0" />
							<s:Keyframe time="2000" value=".4" />
						</s:MotionPath>
					</s:Animate>
					<s:Animate target="{scanlineOverlay}">
						<s:MotionPath property="alpha">
							<s:Keyframe time="0" value="0" />
							<s:Keyframe time="2000" value="1" />
						</s:MotionPath>
					</s:Animate>
					<s:Parallel startDelay="3000">
						<s:CallAction target="{macBootupSound}" functionName="play" />
						<s:Fade target="{screenLogoLoader}" duration="250" />
					</s:Parallel>					
				</s:Parallel>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new ChangeViewStateEvent(ChangeViewStateEvent.CHANGE_STATE, 'booting')]}" startDelay="2000" />
			</s:Sequence>
		</s:Transition>
		
		<s:Transition fromState="preBoot" toState="booting">
			<s:Sequence id="bootingSequence">
				<s:AddAction target="{systemBootConsole}" />
				<s:Parallel>
					<s:Animate target="{screenLogoLoader}" easer="{preBootEase}">
						<s:MotionPath property="verticalCenter">
							<s:Keyframe time="0" value="0" />
							<s:Keyframe time="800" value="-110" />
						</s:MotionPath>
					</s:Animate>
					<s:Animate target="{systemBootConsole}" easer="{preBootEase}">
						<s:MotionPath property="bottom">
							<s:Keyframe time="0" value="{-systemBootConsole.height}"  />
							<s:Keyframe time="800" value="0"/>
						</s:MotionPath>
					</s:Animate>
				</s:Parallel>
				<s:Parallel>
					<s:AddAction target="{bootProgressBar}" />
					<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[0, 100]}"  />
					<s:Fade target="{bootProgressBar}" alphaFrom="0" alphaTo="1" duration="600" />
				</s:Parallel>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 0, 8)]}" />
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[2, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 2, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 5, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 7, 8)]}" startDelay="800"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 8, 8)]}" startDelay="800"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[8, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 10, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 11, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 12, 8)]}" startDelay="100"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[10, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 14, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 15, 8)]}" startDelay="100"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[30, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 17, 8)]}" startDelay="150"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 18, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 19, 8)]}" startDelay="500"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[32, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 21, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 24, 8)]}" startDelay="300"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[48, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 25, 8)]}" startDelay="150"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 26, 8)]}" startDelay="500"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 28, 8)]}" startDelay="300"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 29, 8)]}" startDelay="150"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 31, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 32, 8)]}" startDelay="300"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[58, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 33, 8)]}" startDelay="150"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 34, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 36, 8)]}" startDelay="300"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[75, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 38, 8)]}" startDelay="250"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 40, 8)]}" startDelay="100"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 41, 8)]}" startDelay="600"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[78, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 42, 8)]}" startDelay="550"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 46, 8)]}" startDelay="400"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[80, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 48, 8)]}" startDelay="300"/>
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 49, 8)]}" startDelay="450"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[83, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 50, 8)]}" startDelay="1000"/>
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[93, 100]}"  />
				<s:CallAction target="{bootProgressBar}" functionName="setProgress" args="{[100, 100]}"  />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new UpdateBootConsoleTextEvent(UpdateBootConsoleTextEvent.UPDATE_CONSOLE, 52, 8)]}" />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new ChangeViewStateEvent(ChangeViewStateEvent.CHANGE_STATE, 'login')]}" startDelay="1000" />
			</s:Sequence>
		</s:Transition>
		
		<s:Transition fromState="booting" toState="login">
			<s:Sequence>
				<s:SetAction target="{screenBackgroundPostBootGradient}" property="color" value="0xa7babe" />
				<s:Parallel>
					<s:Animate target="{hdBootupSound}" effectEnd="{hdBootupSound.stop()}" duration="700">
						<s:SimpleMotionPath property="volume" valueTo="0" />
					</s:Animate>
					<s:Animate target="{screenLogoLoader}" easer="{postBootEase}">
						<s:MotionPath property="verticalCenter">
							<s:Keyframe time="0" value="-110" />
							<s:Keyframe time="500" value="-300" />
						</s:MotionPath>
					</s:Animate>
					<s:Animate targets="{bootProgressBar}" easer="{postBootEase}">
						<s:MotionPath property="verticalCenter">
							<s:Keyframe time="0" value="-40" />
							<s:Keyframe time="500" value="-300" />
						</s:MotionPath>
					</s:Animate>
					<s:Animate target="{systemBootConsole}" easer="{preBootEase}">
						<s:MotionPath property="bottom">
							<s:Keyframe time="0" value="0"  />
							<s:Keyframe time="500" value="{-systemBootConsole.height}"/>
						</s:MotionPath>
					</s:Animate>
				</s:Parallel>
				<s:RemoveAction targets="{[screenLogoLoader, bootProgressBar, systemBootConsole]}" />
				<s:Parallel duration="1000">
					<s:AnimateColor target="{screenBackgroundPostBootGradient}" colorFrom="0xa7babe" colorTo="0x2fcdfa" />
					<s:Fade target="{screenBackgroundRadialOverlay}" alphaFrom="0" alphaTo="1" />					
				</s:Parallel>
				<s:AddAction targets="{[loginDialogue, systemClock, controlBars]}" />
				<s:SetAction target="{controlBars}" property="currentState" value="" />
				<s:SetAction target="{loginDialogue}" property="currentState" value="off" />
				<s:SetAction targets="{[loginDialogue, systemClock, controlBars]}" property="alpha" value="0" />
				<s:Parallel duration="600">
					<s:Fade target="{loginDialogue}" alphaFrom="0" alphaTo="1" />
					<s:Fade target="{systemClock}" alphaFrom="0" alphaTo="1" />
					<s:Fade target="{controlBars}" alphaFrom="0" alphaTo="1" />
					<s:SetAction target="{loginDialogue}" property="currentState" value="on" />
					<s:Move3D target="{systemClock}" yFrom="{systemClock.y-150}" yTo="{systemClock.y}" easer="{backEase}" />
					<s:SetAction target="{controlBars}" property="currentState" value="login" />
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		
		<s:Transition fromState="login" toState="authenticated">
			<s:Sequence>
				<s:Parallel duration="600">
					<s:SetAction target="{loginDialogue}" property="currentState" value="off" />
					<s:Fade target="{loginDialogue}" alphaFrom="1" alphaTo="0" />					
				</s:Parallel>
				<s:AddAction target="{systemClock}" />
				<s:Parallel>
					<s:Animate target="{systemClock}" easer="{backEase}">
						<s:MotionPath property="top">
							<s:Keyframe time="0"/>
							<s:Keyframe time="500"/>
						</s:MotionPath>
						<s:MotionPath property="right">
							<s:Keyframe time="0"/>
							<s:Keyframe time="500"/>
						</s:MotionPath>
						<s:MotionPath property="scaleX">
							<s:Keyframe time="0"/>
							<s:Keyframe time="500"/>
						</s:MotionPath>
						<s:MotionPath property="scaleY">
							<s:Keyframe time="0"/>
							<s:Keyframe time="500"/>
						</s:MotionPath>
					</s:Animate>
					<s:SetAction target="{controlBars}" property="currentState" value="domination" />
				</s:Parallel>
				<!-- s:AddAction target="{domination}" /> -->
				<s:SetAction target="{domination}" property="alpha" value="0" /> 
				<s:Parallel>
					<s:Fade target="{domination}" alphaFrom="0" alphaTo="1" />		
					<s:CallAction target="{radarBackgroundSound}" functionName="play" />					
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		
		<s:Transition fromState="authenticated" toState="meltdown">
			
			<s:Sequence startDelay="2000" id="meltdownSequence">
				<s:AnimateFilter target="{screenContent}" bitmapFilter="{displaceFilter}">
					<s:MotionPath property="scaleX">
						<s:Keyframe time="0" value="50"/>
						<s:Keyframe time="50" value="0"/>
						<s:Keyframe time="250" value="0"/>
						<s:Keyframe time="300" value="100"/>
						<s:Keyframe time="370" value="50"/>
						<s:Keyframe time="420" value="150"/>
						<s:Keyframe time="500" value="30"/>
					</s:MotionPath>
				</s:AnimateFilter>
				<s:SetAction target="{powerSymbol}" property="enabled" value="false" />
				<s:CallAction target="{radarBackgroundSound}" functionName="stop" />
				<s:CallAction target="{this}" functionName="dispatchEvent" args="{[new ChangeViewStateEvent(ChangeViewStateEvent.CHANGE_STATE, 'off')]}" startDelay="200" />
			</s:Sequence>
			
		</s:Transition>

		<s:Transition fromState="*" toState="off">
			
			<s:Sequence>
				<s:CallAction target="{macBootupSound}" functionName="stop" />
				<s:CallAction target="{radarBackgroundSound}" functionName="stop" />
				<s:CallAction target="{hdBootupSound}" functionName="stop" />
				<s:AddAction target="{offIllumination}" />
				<s:Animate target="{offIllumination}">
					<s:MotionPath property="top">
						<s:Keyframe time="0"/>
						<s:Keyframe time="200" />
					</s:MotionPath>
					<s:MotionPath property="bottom">
						<s:Keyframe time="0"/>
						<s:Keyframe time="200"/>
					</s:MotionPath>
				</s:Animate>
			</s:Sequence>
			
		</s:Transition>
		
	</s:transitions>
	
	<!-- 
	
	Mask for the content within the screen 
	
	-->
	
	<s:Group
		id="screenMask"
		top="46"
		left="48">
		<s:Path
			data="M0 458.214 5.5835 2.79248 11.167 1.67578 894.348 0 901.606 456.539 0 458.214Z">
			<s:fill>
				<s:SolidColor alpha="0" />
			</s:fill>
		</s:Path>
	</s:Group>
	
	<!-- 
	
	3D Computer Rendering (gotta love Modo) 
	
	-->
	
	<mx:Image
		source="@Embed('/assets/images/screen.png')" />
	
	<!-- 
	
	Content to appear within the screen 
	
	-->
	
	<s:Group
		top="46"
		left="48"
		mask="{screenMask}"
		height="{screenMask.height}"
		width="{screenMask.width}"
		cacheAsBitmap="true">
		
		<s:Group
			id="screenContent"
			filters="{screenFilters}"
			height="{screenMask.height}"
			width="{screenMask.width}"
			cacheAsBitmap="true">

			<s:Rect
				id="screenBackground"
				alpha.off="0"
				alpha.on="1"
				left="0" top="0" right="0" bottom="0">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry includeIn="off" color="0x515151" />
						<s:GradientEntry includeIn="boot" color="0xa7babe" />
						<s:GradientEntry id="screenBackgroundPostBootGradient" includeIn="postBoot" color="0xa7babe" />
					</s:LinearGradient>			
				</s:fill>
			</s:Rect>
			
			<s:Rect
				id="screenBackgroundRadialOverlay"
				includeIn="postBoot"
				blendMode="screen"
				alpha.booting="0"
				alpha.postBoot="1"
				left="0" top="0" right="0" bottom="0">
				<s:fill>
					<s:RadialGradient>
						<s:GradientEntry color="0xFFFFFF" alpha=".9"/>
						<s:GradientEntry color="0x303030" />
					</s:RadialGradient>			
				</s:fill>
			</s:Rect>

			<s:Group
				verticalCenter="0"
				verticalCenter.booting="-110"
				horizontalCenter="0"
				id="screenLogoLoader"
				includeIn="boot"
				alpha="0"
				alpha.off="0"
				alpha.on="1">
				<components:FXLogo
					color="0x71898f" 
					horizontalCenter="0"
					width="116"
					height="62" />
				<s:Label
					styleName="bootingLabel"
					text="OS.1"
					top="48"
					horizontalCenter="18"/>
			</s:Group>
			
			<mx:ProgressBar
				includeIn="booting"
				alpha.off="0"
				alpha.on="1"
				verticalCenter.on="-40"
				horizontalCenter="0"
				id="bootProgressBar"
				width="180"			
				label=""
				mode="manual"
				trackSkin="com.leonardsouza.demos.flexerific.views.skins.ProgressBarTrackSkin"
				barSkin="com.leonardsouza.demos.flexerific.views.skins.ProgressBarSkin" />
			
			<s:VGroup
				id="systemBootConsole"
				includeIn="boot"
				width="100%"
				bottom.preBoot="{-systemBootConsole.height}"
				bottom.booting="0"
				gap="0">
				<s:Group
					height="35"
					width="100%">
					<s:Rect left="0" right="0" top="0" bottom="0">
						<s:fill>
							<s:SolidColor color="0x394447" />
						</s:fill>
					</s:Rect>
					<s:Label
						left="20"
						verticalCenter="2"
						styleName="systemOutLabel" 
						text="SYSTEM CONSOLE"/>
				</s:Group>
				<s:Group
					height="135"
					width="100%">
					<s:Rect left="0" right="0" top="0" bottom="0">
						<s:fill>
							<s:SolidColor color="0x445053" />
						</s:fill>
					</s:Rect>
					<s:TextArea
						left="20"
						top="10"
						bottom="10"
						right="20"
						paddingLeft="0"
						text.on=""
						styleName="consoleText"
						contentBackgroundAlpha="0"
						borderVisible="false"
						focusEnabled="false"
						selectable="false"
						verticalScrollPolicy="off"
						horizontalScrollPolicy="off"
						id="consoleText"/>
				</s:Group>
			</s:VGroup>

			<components:Domination
				id="domination"
				visible="false"
				visible.active="true"
				includeInLayout="{domination.visible}"
				width="100%"
				height="100%"/>

			<components:SystemClock
				id="systemClock"
				right.login="30"
				top.login="30"
				right.active="800"
				top.active="350"
				scaleX.active=".7"
				scaleY.active=".7"
				includeIn="postBoot"/>
			
			<components:ControlBars
				id="controlBars"
				bottom="0"
				height="100%"
				width="100%"
				includeIn="postBoot" />

			<components:LoginDialogue
				id="loginDialogue"
				visible="false"
				visible.postBoot="true"
				includeInLayout="{loginDialogue.visible}"
				width="100%"
				height="100%" />
			
			<s:Rect
				id="screenGlowOverlay"
				includeIn="on"
				blendMode="overlay"
				alpha.off="0"
				alpha.on=".4"
				left="0" top="0" right="0" bottom="0">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="0xFFFFFF" ratio="0" />
						<s:GradientEntry color="0xFFFFFF" ratio=".35" alpha="0" />
						<s:GradientEntry color="0xFFFFFF" ratio=".65" alpha="0" />
						<s:GradientEntry color="0xFFFFFF" ratio="1" />	
					</s:LinearGradient>			
				</s:fill>
			</s:Rect>
			
			<s:Rect
				id="scanlineOverlay"
				left="0" top="0" right="0" bottom="0"
				alpha.off="0"
				alpha.on="1"
				blendMode="multiply"
				filters="{scanlineFilters}">
				<s:fill>
				<s:SolidColor color="0xFFFFFF"/>
				</s:fill>
			</s:Rect>
			
			<s:Rect
				id="offIllumination"
				alpha=".5"
				left="0" top="0" right="0" bottom="0"
				top.off="{height/2-2}" bottom.off="{height/2-2}"
				includeIn="off"
				filters="{[blur]}">
				<s:fill>
					<s:SolidColor color="0xFFFFFF" />
				</s:fill>
			</s:Rect>
			
		</s:Group>
		
	</s:Group>
	
	<!-- 
	
	Shine overlay 
	
	-->
	
	<s:Path
		data="M611.047 0.351456C603.09 23.6737 586.461 49.4725 559.342 82.452 396.346 280.675 67.143 331.268 3.07761 340.645 -5.79641 341.944 7.34226 35.452 7.34226 35.452 7.34226 35.452 7.34226 2.45204 44.3423 2.45204 81.3423 2.45204 611.187 -1.10851 611.047
		0.351456Z" 
		left="12"
		top="12"
		alpha=".21">
		<s:filters>
			<fx:Array>
				<s:BlurFilter blurX="5" blurY="5" />
			</fx:Array>
		</s:filters>
		<s:fill>
			<s:SolidColor color="0xFFFFFF" />
		</s:fill>
	</s:Path>
	
	<!-- 
	
	Bottom bar (below screen) with controls 
	
	-->
	
	<s:Group
		height="106"
		left="0" right="0"
		bottom="0">

		
		<!--
		<s:HGroup
			left="80"
			gap="10"
			verticalCenter="-5"
			id="controlWheels"
			includeIn="postBoot">
			<components:ControlWheel
				filters="{controlWheelFilters}"
				minimum="0"
				maximum="50" 
				value="5"
				snapInterval="3" />
			<components:ControlWheel
				filters="{controlWheelFilters}"
				minimum="0"
				maximum="100" 
				value="22"
				snapInterval="3" />
			<components:ControlWheel
				filters="{controlWheelFilters}"
				minimum="0"
				maximum="100"
				value="99"
				snapInterval="3" />
		</s:HGroup>
		-->
		
		<components:FXLogo
			id="bottomLogo"
			alpha.off=".1"
			alpha.on="1"
			verticalCenter="-5"
			horizontalCenter="0"
			filters="{panelFilters}"/>
		
		<s:HGroup
			right="40"
			bottom="40" 
			verticalAlign="bottom"
			alpha.on="1"
			alpha.off=".5"
			id="powerSymbolAndIndicators"
			filters="{controlWheelFilters}">
			<components:SystemIndicator
				id="indicator"
				shouldFlicker.off="false"
				range.preBoot="{{max:60, min:30}}"
				range.booting="{{max:100, min:10}}"
				range.postBoot="{{max:2000, min:30}}"
				width="6" height="6">
				<components:fill>
					<s:SolidColor color="0xFFFFFF" />
				</components:fill>
			</components:SystemIndicator>
			<s:Group>
				<components:PowerSymbol 	
					id="powerSymbol"
					left="10" 
					buttonMode="true"
					useHandCursor="true"/>
			</s:Group>
		</s:HGroup>
		
	</s:Group>
	
	
</s:SkinnableContainer>
